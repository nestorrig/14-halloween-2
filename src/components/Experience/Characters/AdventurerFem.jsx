/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/characters/Adventurer-fem.glb -o src/components/Experience/Characters/AdventurerFem.jsx -r public 
*/

import React, { useEffect } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useGameContext } from "../../../context/GameContext";
import { useGame } from "ecctrl";
import * as THREE from "three";

export function AdventurerFem(props) {
  const group = React.useRef();
  const { scene, animations } = useGLTF(
    "/models/characters/Adventurer-fem.glb"
  );
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);

  const { scene: gunScene } = useGLTF("/models/weapons/Pistol.glb");
  const { position } = nodes.WristR;

  const controller = useGame();

  // useControls("Adventurer", {
  //   "Gun x": {
  //     value: gunScene.position.x,
  //     step: 0.01,
  //     onChange: (x) => (gunScene.position.x = x),
  //   },
  //   "Gun y": {
  //     value: gunScene.position.y,
  //     step: 0.01,
  //     onChange: (y) => (gunScene.position.y = y),
  //   },
  //   "Gun z": {
  //     value: gunScene.position.z,
  //     step: 0.01,
  //     onChange: (z) => (gunScene.position.z = z),
  //   },

  //   "Gun rotation x": {
  //     value: -0.11,
  //     min: -Math.PI * 2,
  //     max: Math.PI * 2,
  //     step: 0.01,
  //     onChange: (x) => (gunScene.rotation.x = x),
  //   },

  //   "Gun rotation y": {
  //     value: -0.11,
  //     min: -Math.PI * 2,
  //     max: Math.PI * 2,
  //     step: 0.01,
  //     onChange: (y) => (gunScene.rotation.y = y),
  //   },

  //   "Gun rotation z": {
  //     value: -4.94,
  //     min: -Math.PI * 2,
  //     max: Math.PI * 2,
  //     step: 0.01,
  //     onChange: (z) => (gunScene.rotation.z = z),
  //   },
  // });

  const { playerRef, setPlayerPosition, playerHealth, hitReceived, setIsDead } =
    useGameContext();

  React.useEffect(() => {
    nodes.WristR.add(gunScene);
    gunScene.rotation.set(-0.11, -0.11, -4.94);
    gunScene.position.set(
      position.x - 0.0001,
      position.y - 0.001,
      position.z - 0.0002
    );
    gunScene.scale.set(0.0015, 0.0015, 0.0015);
    return () => {
      nodes.WristR.remove(gunScene);
    };
  }, []);

  React.useEffect(() => {
    if (!group.current) return;
    console.log(controller);

    playerRef.current = group.current;
  }, [group, playerRef]);

  useFrame(() => {
    if (!group.current) return;

    const worldPosition = group.current.getWorldPosition(new THREE.Vector3());
    setPlayerPosition([worldPosition.x, worldPosition.y, worldPosition.z]);
  });

  const changeEmmisive = (color) => {
    for (const key in materials) {
      if (Object.prototype.hasOwnProperty.call(materials, key)) {
        const element = materials[key];
        element.emissive = new THREE.Color(color);
      }
    }
  };

  useEffect(() => {
    // console.log(playerHealth);

    if (playerHealth <= 0) {
      controller.action3();
      setIsDead(true);
      changeEmmisive(0xff0000);
      return;
    }
    if (hitReceived) {
      controller.action4();
      changeEmmisive(0xff0000);
      setTimeout(() => changeEmmisive(0x000000), 300);
    }
  }, [hitReceived, playerHealth]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="CharacterArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Root} />
          </group>
          <group
            name="Adventurer_Body"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Body_1"
              geometry={nodes.Adventurer_Body_1.geometry}
              material={materials.LightGreen}
              skeleton={nodes.Adventurer_Body_1.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Body_2"
              geometry={nodes.Adventurer_Body_2.geometry}
              material={materials.Skin}
              skeleton={nodes.Adventurer_Body_2.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Body_3"
              geometry={nodes.Adventurer_Body_3.geometry}
              material={materials.Green}
              skeleton={nodes.Adventurer_Body_3.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Body_4"
              geometry={nodes.Adventurer_Body_4.geometry}
              material={materials.White}
              skeleton={nodes.Adventurer_Body_4.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Body_5"
              geometry={nodes.Adventurer_Body_5.geometry}
              material={materials.Brown2}
              skeleton={nodes.Adventurer_Body_5.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Body_6"
              geometry={nodes.Adventurer_Body_6.geometry}
              material={materials.Gold}
              skeleton={nodes.Adventurer_Body_6.skeleton}
            />
          </group>
          <group
            name="Adventurer_Feet"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Feet_1"
              geometry={nodes.Adventurer_Feet_1.geometry}
              material={materials.Brown2}
              skeleton={nodes.Adventurer_Feet_1.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Feet_2"
              geometry={nodes.Adventurer_Feet_2.geometry}
              material={materials.Brown_02}
              skeleton={nodes.Adventurer_Feet_2.skeleton}
            />
          </group>
          <group
            name="Adventurer_Head"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Head_1"
              geometry={nodes.Adventurer_Head_1.geometry}
              material={materials.Skin}
              skeleton={nodes.Adventurer_Head_1.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Head_2"
              geometry={nodes.Adventurer_Head_2.geometry}
              material={materials.Hair_Brown}
              skeleton={nodes.Adventurer_Head_2.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Head_3"
              geometry={nodes.Adventurer_Head_3.geometry}
              material={materials.Brown}
              skeleton={nodes.Adventurer_Head_3.skeleton}
            />
          </group>
          <group
            name="Adventurer_Legs"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Legs_1"
              geometry={nodes.Adventurer_Legs_1.geometry}
              material={materials.LightGreen}
              skeleton={nodes.Adventurer_Legs_1.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Legs_2"
              geometry={nodes.Adventurer_Legs_2.geometry}
              material={materials.Skin}
              skeleton={nodes.Adventurer_Legs_2.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Legs_3"
              geometry={nodes.Adventurer_Legs_3.geometry}
              material={materials.White}
              skeleton={nodes.Adventurer_Legs_3.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Legs_4"
              geometry={nodes.Adventurer_Legs_4.geometry}
              material={materials.Brown2}
              skeleton={nodes.Adventurer_Legs_4.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Legs_5"
              geometry={nodes.Adventurer_Legs_5.geometry}
              material={materials.Gold}
              skeleton={nodes.Adventurer_Legs_5.skeleton}
            />
            <skinnedMesh
              castShadow
              receiveShadow
              name="Adventurer_Legs_6"
              geometry={nodes.Adventurer_Legs_6.geometry}
              material={materials.Brown_02}
              skeleton={nodes.Adventurer_Legs_6.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/characters/Adventurer-fem.glb");
useGLTF.preload("/models/weapons/Pistol.glb");
